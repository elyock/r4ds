---
title: "Chapter 3"
author: "Kevin J. Coyle"
format: gfm
editor: visual
---

```{r}
#| label: setup

library(nycflights13)
library(tidyverse)
```

#### 3.2.5 Exercises

1.  In a single pipeline for each condition, find all flights that meet the condition:
    -   Had an arrival delay of two or more hours
    -   Flew to Houston (`IAH` or `HOU`)
    -   Were operated by United, American, or Delta
    -   Departed in summer (July, August, and September)
    -   Arrived more than two hours late, but didn’t leave late
    -   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights |>
  filter(arr_delay >= 2)
flights |>
  filter(dest %in% c("IAH", "HOU"))
flights |>
  filter(carrier %in% c("UA", "AA", "DL"))
flights |>
  filter(month %in% 7:9)
flights |>
  filter(arr_delay > 120 & dep_delay <= 0)
flights |>
  filter(dep_delay >= 60 & (dep_delay - arr_delay) > 30)
```

2.  Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

This question makes sense to me only if it's asking for two separate sorts.

```{r}
flights |>
  arrange(desc(dep_delay))
flights |>
  arrange(dep_time)
```

3.  Sort `flights` to find the fastest flights.

```{r}
flights |>
  arrange(desc(distance / air_time))
```

4.  Was there a flight on every day of 2013?

```{r}
flights |>
  distinct(month,day) |>
  count()
```

5.  Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
flights |>
  arrange(desc(distance))
flights |>
  arrange(distance)
```

6.  Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.

Use `filter()` first to reduce the amount of data that `arrange()` must sort.

#### 3.3.5 Exercises

1.  Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?

`dep_time` = `sched_dep_time` + `dep_delay`

2.  Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`.

```{r}
flights |> select(dep_time, dep_delay, arr_time, arr_delay)
flights |> select(starts_with(c("dep", "arr")))
flights |> select(ends_with(c("time", "delay")) &
                    !contains(c("sched", "air")))
```

3.  What happens if you specify the name of the same variable multiple times in a [`select()`](https://dplyr.tidyverse.org/reference/select.html) call?

```{r}
flights |> select(arr_time, arr_time)
```

The variable appears only once.

4.  What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) function do? Why might it be helpful in conjunction with this vector?

```{r}
variables <- c("year", "month", "day", "dep_delay", "arr_delay")
flights |> select(any_of(variables))
flights |> select(!any_of(variables))
```

`any_of()` would be helpful for selecting or deselecting variables as a group.

5.  Does the result of running the following code surprise you? How do the select helpers deal with upper and lower case by default? How can you change that default?

```{r}
flights |> select(contains("TIME"))
flights |> select(contains("TIME", ignore.case = FALSE))
```

By default, `contains()` is case insensitive. To make it case sensitive, set `ignore.case = FALSE`.

6.  Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.

```{r}
flights |>
  rename(air_time_min = air_time) |>
  relocate(air_time_min)
```

7.  Why doesn’t the following work, and what does the error mean?

```{r}
#| error: true
#| 
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
```

This doesn't work because the result of the call to `select()` contains only the variable `tailnum`, and not the variable `arr_delay`.

#### 3.5.7 Exercises

1.  Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

```{r}
flights |>
  summarise(
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    .by = carrier
  ) |>
  arrange(desc(avg_arr_delay))
flights |>
    summarise(
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    .by = c(carrier, dest)
  ) |>
  arrange(desc(avg_arr_delay))

```

2.  Find the flights that are most delayed upon departure from each destination.

```{r}
flights |>
  group_by(dest) |>
  arrange(dest, desc(dep_delay)) |>
  slice_head(n = 1) |>
  relocate(dest, dep_delay)
```

3.  How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
flights |>
  group_by(hour) |>
  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
  ggplot(aes(x = hour, y = avg_delay)) +
    geom_point() +
    geom_smooth()
```

4.  What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

The absolute value of `n` is subtracted from the group size.

5.  Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

`count` counts the number of observations in each group. The `sort` argument, if `TRUE` show the largest groups first. The default value of `sort` is `FALSE`.

6.  Suppose we have the following tiny data frame:

```{r}
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
```

a\. Write down what you think the output will look like, then check if you were correct, and describe what [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) does.

It groups by `y`; `y` is unsorted.

```{r}
df |>
  group_by(y)
```

b\. Write down what you think the output will look like, then check if you were correct, and describe what [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) does. Also comment on how it’s different from the [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) in part (a).

It sorts by `y` ascending.

```{r}
df |>
  arrange(y)
```

c\. Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does.

It groups by `y` and calculates the mean of `x` for each `y` group.

```{r}
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
```

d\. Write down what you think the output will look like, then check if you
were correct, and describe what the pipeline does. Then, comment on what the message says.

It groups by `y` and by `z` within each `y`, and calculates the mean of `x` within each `y` and `z` subgroup. The message means that summarize drops the `z` grouping and groups output by `y` only.

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
```

e\. Write down what you think the output will look like, then check if you
were correct, and describe what the pipeline does. How is the output
different from the one in part (d)?

It does the same grouping and calculation, but drops all the grouping in the output.

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
```

f\. Write down what you think the outputs will look like, then check
if you were correct, and describe what each pipeline does. How are the
outputs of the two pipelines different?

`summarize()` has one summary row per `y` `z` grouping in the output data frame, and the `z` grouping is dropped. With `mutate` the groupings are kept, the output data frame has the same number of rows as the input data frame, and the `x` variable is kept.

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```
